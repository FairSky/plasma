* PlasmaPeer should have a root-id method, public-url, and maybe some other
helpers.

* new peer connections should always send their URL as the first message so they
  can be correctly stored in the connection cache, otherwise we just have the
  outgoing port number...

* when a connection is closed (or fails) remotely we need to close it and remove
 it from the connection cache.

* create a link query type to connect one or more nodes

(query (link src edge tgt))

(link ROOT-ID {:label :foo} {:name "TJ Watsom"})
(link ROOT-ID :foo {:name "TJ Watsom"})
(link (path [:a :b :c]) :foo {:name "TJ Watsom"})

* get-connection from a peer to get a connection that has been extended to
support query functions.  This way we can call query, or sub-query, etc... on
either a peer or a connection.

* Add various error handling tests for connections and peer operations, and
look at moving some of the code to pipelines.

* Make the standard query function return a result channel and then
have some other helpers for getting the results and supporting a timeout

------------

Supporting experiments:

* insertion
 - to push nodes onto a peer

* enable logging of typical networking metrics:
 - bytes
 - messages
 - peers
 - latency

* implement recursive and iterative operators
* implement query packet TTL counter that decrements at each hop
 - packets dropped when (zero? TTL)
* implement latency introducer stage in pipeline so we can simulate larger
networks

----------------------------------------------------------

== Moving to defrecord style:

methods:
* branch?
 - replaces the operator/op-branch-map
* plan version
* instance version

----------------------------------------------------------

* subscribe to a (local or remote) node 
 - return a channel to receive update events
 - send uuid to peer, which goes into a subscription map
 - node update functions send event to subscribers after updates

Operators:

* and/or logical operators for predicates
 - AND is just appending more selection operators
 - OR we need to short-circuit on true and forward OA past
   next selection ops, else go to next selection operator

* insert node/edge
* update node/edge
* delete node/edge

* Add regular expression edge predicates for traverse operator

-------------------------------

* add versioning by saving previous versions with a new uuid and a link
